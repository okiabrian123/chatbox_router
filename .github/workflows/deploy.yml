name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: okiabrian/chatbox-router

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-x86-64-linux-gnu g++-x86-64-linux-gnu
        sudo ln -sf /usr/bin/x86_64-linux-gnu-gcc /usr/bin/x86_64-unknown-linux-gnu-gcc
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu
    
    - name: Set up cargo config
      run: |
        mkdir -p ~/.cargo
        cat > ~/.cargo/config.toml << 'EOF'
        [target.x86_64-unknown-linux-gnu]
        linker = "x86_64-linux-gnu-gcc"
        EOF
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: |
          target/
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-
    
    - name: Run tests
      run: cargo test --verbose --target=x86_64-unknown-linux-gnu

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-linux-binary:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-x86-64-linux-gnu g++-x86-64-linux-gnu
        sudo ln -sf /usr/bin/x86_64-linux-gnu-gcc /usr/bin/x86_64-unknown-linux-gnu-gcc
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu
    
    - name: Set up cargo config
      run: |
        mkdir -p ~/.cargo
        cat > ~/.cargo/config.toml << 'EOF'
        [target.x86_64-unknown-linux-gnu]
        linker = "x86_64-linux-gnu-gcc"
        EOF
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: |
          target/
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-
    
    - name: Build release binary
      run: |
        cargo build --release --target=x86_64-unknown-linux-gnu
        temp=$(cat ./Cargo.toml | grep -E "^name\s*=" | awk -F "=" "{print $2}" | tr -d "\"" | tr -d "[:space:]")
        package_name=${temp#name=}
        cp target/x86_64-unknown-linux-gnu/release/${package_name} ${package_name}-x86_64
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-binary
        path: |
          *-x86_64
          static/
          .config/
        retention-days: 30

  deploy:
    needs: build-linux-binary
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download binary artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-binary
        path: ./release
    
    - name: Create deployment package
      run: |
        cd ./release
        temp=$(cat ../Cargo.toml | grep -E "^name\s*=" | awk -F "=" "{print $2}" | tr -d "\"" | tr -d "[:space:]")
        package_name=${temp#name=}
        tar -czf ${package_name}-release.tar.gz *-x86_64 static/ .config/
        
        # Create download script
        cat > download-and-run.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Get the latest release download URL
        API_URL="https://api.github.com/repos/okiabrian123/chatbox_router/releases/latest"
        DOWNLOAD_URL=$(curl -s $API_URL | grep "browser_download_url.*-release.tar.gz" | cut -d '"' -f 4)
        
        if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Could not find download URL"
            exit 1
        fi
        
        echo "Downloading latest release..."
        wget -O release.tar.gz "$DOWNLOAD_URL"
        
        echo "Extracting..."
        tar -xzf release.tar.gz
        
        # Get the binary name
        BINARY_NAME=$(ls *-x86_64 | head -n 1)
        chmod +x "$BINARY_NAME"
        
        echo "Starting application..."
        ./"$BINARY_NAME"
        EOF
        
        chmod +x download-and-run.sh
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./release/*-release.tar.gz
          ./release/download-and-run.sh
        tag_name: latest
        name: Latest Release
        body: |
          Latest automated release of the chatbox_router application.
          
          ## Quick Start
          Download and run the application with:
          ```bash
          wget https://github.com/okiabrian123/chatbox_router/releases/latest/download/download-and-run.sh
          chmod +x download-and-run.sh
          ./download-and-run.sh
          ```
          
          ## Manual Download
          Or download the release package and extract it manually.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}